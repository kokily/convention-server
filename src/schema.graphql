type CreateAdminResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CreateAdmin(password: String!): CreateAdminResponse!
  LoginAdmin(password: String!): LoginAdminResponse!
  LogoutAdmin: LogoutAdminResponse!
  AddAsk(native: String!, name: String!, phone: String!, email: String!, reserveDate: String!, reserveTime: String!, num: Int!, body: String!): AddAskResponse!
  RemoveAsk(id: ID!): RemoveAskResponse!
  AddBanner(title: String!, order: Int!, isUse: Boolean!, image: String!): AddBannerResponse!
  RemoveBanner(id: ID!): RemoveBannerResponse!
  UpdateBanner(id: ID!, title: String, order: Int, isUse: Boolean, image: String): UpdateBannerResponse!
  AddBanquet(title: String!, startTime: String!, endTime: String!, num: Int!, eventDate: String!): AddBanquetResponse!
  RemoveBanquet(id: ID!): RemoveBanquetResponse!
  UpdateBanquet(id: ID!, title: String, startTime: String, endTime: String, num: String, eventDate: String): UpdateBanquetResponse!
  AddWeddingEvent(title: String!, body: String!, info: String, thumbnail: String): AddWeddingEventResponse!
  RemoveWeddingEvent(id: ID!): RemoveWeddingEventResponse!
  UpdateWeddingEvent(id: ID!, title: String, body: String, info: String, thumbnail: String): UpdateWeddingEventResponse!
  AddReserve(husbandName: String!, husbandNative: String!, husbandPhone: String!, husbandEmail: String, brideName: String!, brideNative: String!, bridePhone: String!, brideEmail: String, firstWeddingDate: String!, firstWeddingTime: String!, secondWeddingDate: String, secondWeddingTime: String, etcAsk: String): AddReserveResponse!
  CancelReserve(id: ID!): CancelReserveResponse!
  ConfirmReserve(id: ID!, confirmDate: String!, confirmTime: String!): ConfirmReserveResponse!
  RemoveReserve(id: ID!): RemoveReserveResponse!
  AddSurvey(native: String!, belong: String!, purpose: [String]!, servicePoint: Int!, mealsPoint: Int!, facility: Int!, reuse: Int!, etc: String): AddSurveyResponse!
  RemoveSurvey(id: ID!): RemoveSurveyResponse!
  AddTip(title: String!, body: String!): AddTipResponse!
  RemoveTip(id: ID!): RemoveTipResponse!
  UpdateTip(id: ID!, title: String, body: String): UpdateTipResponse!
}

type LoginAdminResponse {
  ok: Boolean!
  error: String
  token: String
}

type LogoutAdminResponse {
  ok: Boolean!
  error: String
}

type Me {
  adminId: String
}

type MeResponse {
  ok: Boolean!
  error: String
  me: Me
}

type Query {
  Me: MeResponse!
  ListAsks(page: Int, name: String): ListAsksResponse!
  ReadAsk(id: ID!): ReadAskResponse!
  ListBanners(cursor: ID): ListBannersResponse!
  ReadBanner(id: ID!): ReadBannerResponse!
  ListBanquet(date: String!): ListBanquetResponse!
  ReadBanquet(id: ID!): ReadBanquetResponse!
  ListWeddingEvents(cursor: ID, title: String, body: String): ListWeddingEventsResponse!
  ReadWeddingEvent(id: ID!): ReadWeddingEventResponse!
  ListReserves(page: Int, confirm: Boolean, name: String, phone: String, email: String): ListReservesResponse!
  ReadReserve(id: ID!): ReadReserveResponse!
  ListSurvey(page: Int): ListSurveyResponse!
  ReadSurvey(id: ID!): ReadSurveyResponse!
  ResultSurvey(startDate: Date!, endDate: Date!): ResultSurveyResponse!
  ListTips(page: Int, title: String): ListTipsResponse!
  ReadTip(id: ID!): ReadTipResponse!
}

type AddAskResponse {
  ok: Boolean!
  error: String
}

type ListAsksResponse {
  ok: Boolean!
  error: String
  asks: [Ask]
  lastPage: Int!
}

type ReadAskResponse {
  ok: Boolean!
  error: String
  ask: Ask
}

type RemoveAskResponse {
  ok: Boolean!
  error: String
}

type AddBannerResponse {
  ok: Boolean!
  error: String
}

type ListBannersResponse {
  ok: Boolean!
  error: String
  banners: [Banner]
}

type ReadBannerResponse {
  ok: Boolean!
  error: String
  banner: Banner
}

type RemoveBannerResponse {
  ok: Boolean!
  error: String
}

type UpdateBannerResponse {
  ok: Boolean!
  error: String
}

type AddBanquetResponse {
  ok: Boolean!
  error: String
}

type ListBanquetResponse {
  ok: Boolean!
  error: String
  banquets: [Banquet]
}

type ReadBanquetResponse {
  ok: Boolean!
  error: String
  banquet: Banquet
}

type RemoveBanquetResponse {
  ok: Boolean!
  error: String
}

type UpdateBanquetResponse {
  ok: Boolean!
  error: String
}

type AddWeddingEventResponse {
  ok: Boolean!
  error: String
}

type ListWeddingEventsResponse {
  ok: Boolean!
  error: String
  weddingEvents: [WeddingEvent]
}

type ReadWeddingEventResponse {
  ok: Boolean!
  error: String
  weddingEvent: WeddingEvent
}

type RemoveWeddingEventResponse {
  ok: Boolean!
  error: String
}

type UpdateWeddingEventResponse {
  ok: Boolean!
  error: String
}

type AddReserveResponse {
  ok: Boolean!
  error: String
}

type CancelReserveResponse {
  ok: Boolean!
  error: String
}

type ConfirmReserveResponse {
  ok: Boolean!
  error: String
}

type ListReservesResponse {
  ok: Boolean!
  error: String
  reserves: [Reserve]
  lastPage: Int!
}

type ReadReserveResponse {
  ok: Boolean!
  error: String
  reserve: Reserve
}

type RemoveReserveResponse {
  ok: Boolean!
  error: String
}

scalar Date

type Admin {
  id: ID!
  username: String!
  password: String!
  businessName: String
  businessNumber: String
  leader: String
  email: String
  privacyNeed: String
  address: String
  telephone: String
  fax: String
  facebook: String
  instagram: String
  youtube: String
  twitter: String
  blog: String
}

type Seo {
  id: ID!
  title: String
  description: String
  keywords: String
  headTag: String
  bodyTag: String
}

type Tip {
  id: ID!
  title: String!
  body: String!
  created_at: Date!
  updated_at: Date
}

type WeddingEvent {
  id: ID!
  title: String!
  body: String!
  info: String
  thumbnail: String
  created_at: Date!
  updated_at: Date
}

type Reserve {
  id: ID!
  husbandName: String!
  husbandNative: String!
  husbandPhone: String!
  husbandEmail: String
  brideName: String!
  brideNative: String!
  bridePhone: String!
  brideEmail: String
  firstWeddingDate: String!
  firstWeddingTime: String!
  secondWeddingDate: String
  secondWeddingTime: String
  etcAsk: String
  isConfirm: Boolean!
  confirmDate: String
  confirmTime: String
  created_at: Date!
}

type Banquet {
  id: ID!
  title: String!
  startTime: String!
  endTime: String!
  num: Int!
  eventDate: String!
  created_at: Date!
}

type Ask {
  id: ID!
  native: String!
  name: String!
  phone: String!
  email: String!
  reserveDate: String!
  reserveTime: String!
  num: Int!
  body: String!
  created_at: Date!
}

type Survey {
  id: ID!
  native: String!
  belong: String!
  purpose: [String]!
  servicePoint: Int!
  mealsPoint: Int!
  facility: Int!
  reuse: Int!
  etc: String
  created_at: Date!
}

type Native {
  soldier: Int!
  reserve: Int!
  official: Int!
  public: Int!
  general: Int!
}

type Belong {
  army: Int!
  air: Int!
  navy: Int!
  marine: Int!
  national: Int!
}

type Purpose {
  guest: Int!
  small: Int!
  big: Int!
  seminar: Int!
  etc: Int!
}

type Point {
  veryGood: Int!
  good: Int!
  normal: Int!
  bad: Int!
  veryBad: Int!
}

type SubPoint {
  good: Int!
  normal: Int!
  bad: Int!
}

type Result {
  native: Native!
  belong: Belong!
  purpose: Purpose!
  servicePoint: Point!
  mealsPoint: Point!
  facility: Point!
  reuse: SubPoint!
}

type Banner {
  id: ID!
  title: String!
  order: Int!
  isUse: Boolean!
  image: String!
  created_at: Date!
}

type AddSurveyResponse {
  ok: Boolean!
  error: String
}

type ListSurveyResponse {
  ok: Boolean!
  error: String
  survey: [Survey]
  lastPage: Int!
}

type ReadSurveyResponse {
  ok: Boolean!
  error: String
  survey: Survey
}

type RemoveSurveyResponse {
  ok: Boolean!
  error: String
}

type ResultSurveyResponse {
  ok: Boolean!
  error: String
  result: Result
  num: Int!
}

type AddTipResponse {
  ok: Boolean!
  error: String
}

type ListTipsResponse {
  ok: Boolean!
  error: String
  tips: [Tip]
  lastPage: Int!
}

type ReadTipResponse {
  ok: Boolean!
  error: String
  tip: Tip
}

type RemoveTipResponse {
  ok: Boolean!
  error: String
}

type UpdateTipResponse {
  ok: Boolean!
  error: String
}
